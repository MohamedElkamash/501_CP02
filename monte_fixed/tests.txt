    std::map<int, std::vector<Surface>> surfaces = geometry.surfaces();

    for (auto & [dim, surface_vector] : surfaces)
    {
        std::cout << "dim = " << dim << '\n';
        for (auto & surface : surface_vector)
        {
            std::cout << "id = " << surface.id() << '\n';
            std::cout << "axis = " << surface.axis() << '\n';
            std::cout << "coordinate = " << surface.coordinate() << '\n';
        }
    }

    std::vector<Material> materials = geometry.materials();

    for (auto & material : materials)
    {
        std::cout << "total_xs = " << material.totalXS() << '\n';
    }

     std::vector<Surface> surfaces = cell.surfaces();
    
    for (auto & surface : surfaces)
    {
        std::cout << "axis = " << surface.axis() << '\n';
        std::cout << "coordinate = " << surface.coordinate() << '\n';
    }

    /*     for (auto & [id, cell] : cells)
    {
        std::cout << "id x = " << id[0] << '\n';
        std::cout << "id y = " << id[1] << '\n';
        std::cout << "id z = " << id[2] << '\n';
        std::vector<Surface> surfaces = cell.surfaces();
         for (auto & surface : surfaces)
        {
            std::cout << "id = " << surface.id() << '\n';
            std::cout << "axis = " << surface.axis() << '\n';
            std::cout << "coordinate = " << surface.coordinate() << '\n';
        } 
    } */

     std::vector<Surface> surfaces = cell.surfaces();
    
    for (auto & surface : surfaces)
    {
        std::cout << "axis = " << surface.axis() << '\n';
        std::cout << "coordinate = " << surface.coordinate() << '\n';
    }

        for(int i = 0; i < 100; ++i)
    {
        int index = source.samplePositionIndex();
        std::array<double, N_DIMS> position = source.sampledPosition(index);
        std::array<double, N_DIMS> mu = source.sampledDirection(index);
        std::cout << "index = " << index << '\n';
        std::cout << "x = " << position[0] << "  y = " << position[1] << "  z = " << position[2] << '\n';
        std::cout << "mu_x = " << mu[0] << "  mu_y = " << mu[1] << "  mu_z = " << mu[2] << '\n';
    }